use std::collections::HashMap;
use std::fs::File;
use std::io::{self, BufRead};
use std::path::Path;

struct Color {
    blue: i32,
    red: i32,
    green: i32,
}

fn game_counts(game: &str) -> Color {
    let game = game.split(",").collect::<Vec<&str>>();

    let mut c = Color {
        blue: 0,
        red: 0,
        green: 0,
    };

    for hand in game {
        let cards = hand.trim().split(" ").collect::<Vec<&str>>();
        //println!("{}::{}", cards[0], cards[1]);
        let value: i32 = cards[0].parse().unwrap();
        match cards[1] {
            "blue" => c.blue += value,
            "green" => c.green += value,
            "red" => c.red += value,
            _ => println!("oops::{}", cards[1]),
        }
    }

    c
}

fn game_power(game: &str) -> i32 {
    let gg = game.copy();
    let game = game.split(",").collect::<Vec<&str>>();

    let mut c = Color {
        blue: 0,
        red: 0,
        green: 0,
    };

    for hand in game {
        let cards = hand.trim().split(" ").collect::<Vec<&str>>();
        let value: i32 = cards[0].parse().unwrap();
        match cards[1] {
            "blue" if value > c.blue => c.blue = value,
            "green" if value > c.green => c.green = value,
            "red" if value > c.red => c.red = value,
            _ => continue,
        }
    }
    let n = c.blue * c.green * c.red;
    println!("{}::{}", gg, n);
    n
}

fn game_validator(game: &str) -> bool {
    let game = game.split(",").collect::<Vec<&str>>();
    let mut out = true;
    for hand in game {
        let cards = hand.trim().split(" ").collect::<Vec<&str>>();
        let value: i32 = cards[0].parse().unwrap();
        match cards[1] {
            "blue" if value > 14 => out = false,
            "green" if value > 13 => out = false,
            "red" if value > 12 => out = false,
            _ => continue,
        }
    }

    out
}

fn process_line(s: String) -> i32 {
    let parts = s.split(":").collect::<Vec<&str>>();
    let games = parts[1].split(";").collect::<Vec<&str>>();
    let game_num: i32 = parts[0].split(" ").collect::<Vec<&str>>()[1]
        .parse()
        .unwrap();
    let mut line_counts = Color {
        red: 0,
        green: 0,
        blue: 0,
    };
    let mut valid_line = true;
    let mut line_power: i32 = 0;
    for game in games {
        let color_map = game_counts(game);
        line_counts.blue += color_map.blue;
        line_counts.red += color_map.red;
        line_counts.green += color_map.green;
        if !game_validator(game) {
            valid_line = false
        }
      let p = game_power(game);
      if p > line_power {line_power = p}
      //println!("{}", p)
    }


    line_power
    //if valid_line {
    //    game_num
    //} else {
    //    0
    //}
}

fn read_lines<P>(filename: P) -> io::Result<io::Lines<io::BufReader<File>>>
where
    P: AsRef<Path>,
{
    let file = File::open(filename)?;
    Ok(io::BufReader::new(file).lines())
}

fn main() -> io::Result<()> {
    let file_path = "src/data.txt";
    let mut out: i32 = 0;
    let lines = read_lines(file_path)?;
    for line in lines {
        if let Ok(l) = line {
            let v = process_line(l.clone());
            out += v;
            //println!("{}:::{}", l, v)
        }
    }

    println!("{}", out);

    Ok(())
}
